def get_minkowsky_sum(original_shape: Polygon, r: float) -> Polygon:
    """
    Get the polygon representing the Minkowsky sum
    :param original_shape: The original obstacle
    :param r: The radius of the rhombus
    :return: The polygon composed from the Minkowsky sums
    """
    robot = [( 0, -r), (r, 0), (0, r), (-r, 0)]
    obstacle = []
    original_shape = orient(original_shape, sign=1.0)
    for i in mapping(original_shape)['coordinates']:
        for x in i:
            obstacle.append(x)

    if (len(obstacle)%2==1):
        obstacle.pop()
    min_vertices=[]
    r_vertices_num = 4
    obstacle_vertices_num = len(obstacle)
    i=0
    j=0
    robot.append(robot[0])
    robot.append(robot[1])
    robot.append(robot[2])
    robot.append(robot[3])
    obstacle.append(obstacle[0])
    obstacle.append(obstacle[1])
    obstacle.append(obstacle[2])
    obstacle.append(obstacle[3])
    while(True):
        if (i>obstacle_vertices_num and j>r_vertices_num):
            break
        new_vertex = (obstacle[i][0]+robot[j][0],obstacle[i][1]+robot[j][1])
        #if new_vertex not in min_vertices:
        min_vertices.append(new_vertex)
        robotX = robot[(j+1)][0]-robot[j][0]
        robotY = robot[j+1][1]-robot[j][1]
        obstacleX = obstacle[i+1][0] - obstacle[i][0]
        obstacleY = obstacle[i+1][1] - obstacle[i][1]
        angle_decider= obstacleX*robotY-obstacleY*robotX
        if (angle_decider>0):
            i = i+1
        elif (angle_decider<0):
            j = j+1
        else:
            i = i+1
            j = j+1
    min_vertices.pop()
    min_vertices.pop()
    return Polygon(min_vertices)


# TODO
def get_visibility_graph(obstacles: List[Polygon], source=None, dest=None) -> List[LineString]:
    """
    Get The visibility graph of a given map
    :param obstacles: A list of the obstacles in the map
    :param source: The starting position of the robot. None for part 1.
    :param dest: The destination of the query. None for part 1.
    :return: A list of LineStrings holding the edges of the visibility graph
    """
    vertices = []
    lines= []
    for poly in obstacles:
        for i in mapping(poly)['coordinates']:
            for x in i:
                vertices.append(x)

    for pair in itertools.combinations(vertices,2):
        intersects = False
        line = LineString(pair)

        for poly in obstacles:
            if ( line.covered_by(poly) or line.crosses(poly)):
                intersects = True
                break
        if not (intersects):
            lines.append(line)
    return lines
    pass
